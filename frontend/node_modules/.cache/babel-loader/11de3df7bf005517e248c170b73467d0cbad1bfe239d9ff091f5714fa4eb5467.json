{"ast":null,"code":"import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { getValueTransition } from '../utils/transitions.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({\n  protectedKeys,\n  needsAnimating\n}, key) {\n  const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n  needsAnimating[key] = false;\n  return shouldBlock;\n}\nfunction animateTarget(visualElement, definition, {\n  delay = 0,\n  transitionOverride,\n  type\n} = {}) {\n  let {\n    transition = visualElement.getDefaultTransition(),\n    transitionEnd,\n    ...target\n  } = visualElement.makeTargetAnimatable(definition);\n  const willChange = visualElement.getValue(\"willChange\");\n  if (transitionOverride) transition = transitionOverride;\n  const animations = [];\n  const animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];\n  for (const key in target) {\n    const value = visualElement.getValue(key);\n    const valueTarget = target[key];\n    if (!value || valueTarget === undefined || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {\n      continue;\n    }\n    const valueTransition = {\n      delay,\n      elapsed: 0,\n      ...getValueTransition(transition || {}, key)\n    };\n    /**\n     * If this is the first time a value is being animated, check\n     * to see if we're handling off from an existing animation.\n     */\n    let canSkipHandoff = true;\n    if (window.HandoffAppearAnimations && !value.hasAnimated) {\n      const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n      if (appearId) {\n        canSkipHandoff = false;\n        valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\n        valueTransition.syncStart = true;\n      }\n    }\n    let canSkip = canSkipHandoff && valueTarget === value.get();\n    if (valueTransition.type === \"spring\" && (value.getVelocity() || valueTransition.velocity)) {\n      canSkip = false;\n    }\n    if (canSkip) continue;\n    /**\n     * Skip this animation if the value hasn't changed. With an exception\n     * that we can't skip if it's a spring animation\n     */\n    if (canSkipHandoff && valueTarget === value.get() && (valueTransition.type !== \"spring\" || !value.getVelocity() && !valueTransition.velocity)) {\n      continue;\n    }\n    value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key) ? {\n      type: false\n    } : valueTransition));\n    const animation = value.animation;\n    if (isWillChangeMotionValue(willChange)) {\n      willChange.add(key);\n      animation.then(() => willChange.remove(key));\n    }\n    animations.push(animation);\n  }\n  if (transitionEnd) {\n    Promise.all(animations).then(() => {\n      transitionEnd && setTarget(visualElement, transitionEnd);\n    });\n  }\n  return animations;\n}\nexport { animateTarget };","map":{"version":3,"names":["transformProps","optimizedAppearDataAttribute","animateMotionValue","isWillChangeMotionValue","setTarget","getValueTransition","frame","shouldBlockAnimation","protectedKeys","needsAnimating","key","shouldBlock","hasOwnProperty","animateTarget","visualElement","definition","delay","transitionOverride","type","transition","getDefaultTransition","transitionEnd","target","makeTargetAnimatable","willChange","getValue","animations","animationTypeState","animationState","getState","value","valueTarget","undefined","valueTransition","elapsed","canSkipHandoff","window","HandoffAppearAnimations","hasAnimated","appearId","getProps","syncStart","canSkip","get","getVelocity","velocity","start","shouldReduceMotion","has","animation","add","then","remove","push","Promise","all"],"sources":["/Users/alexong/workspace/isu_senior_design/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs"],"sourcesContent":["import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { getValueTransition } from '../utils/transitions.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key);\n        const valueTarget = target[key];\n        if (!value ||\n            valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = {\n            delay,\n            elapsed: 0,\n            ...getValueTransition(transition || {}, key),\n        };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        let canSkipHandoff = true;\n        if (window.HandoffAppearAnimations && !value.hasAnimated) {\n            const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n            if (appearId) {\n                canSkipHandoff = false;\n                valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\n                valueTransition.syncStart = true;\n            }\n        }\n        let canSkip = canSkipHandoff && valueTarget === value.get();\n        if (valueTransition.type === \"spring\" &&\n            (value.getVelocity() || valueTransition.velocity)) {\n            canSkip = false;\n        }\n        if (canSkip)\n            continue;\n        /**\n         * Skip this animation if the value hasn't changed. With an exception\n         * that we can't skip if it's a spring animation\n         */\n        if (canSkipHandoff &&\n            valueTarget === value.get() &&\n            (valueTransition.type !== \"spring\" ||\n                (!value.getVelocity() && !valueTransition.velocity))) {\n            continue;\n        }\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition));\n        const animation = value.animation;\n        if (isWillChangeMotionValue(willChange)) {\n            willChange.add(key);\n            animation.then(() => willChange.remove(key));\n        }\n        animations.push(animation);\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            transitionEnd && setTarget(visualElement, transitionEnd);\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}